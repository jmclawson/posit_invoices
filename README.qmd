---
title: "README"
format: gfm
execute: 
  eval: false
  message: false
  warning: false
  df-print: paged
---

## Recording Data

Save contract data in a single CSV file within the project directory. The file "[my_records.csv](my_records.csv)" is included as an example:

```{r}
#| eval: true
#| message: false
readr::read_csv("my_records.csv")
```

Each contract, each missed day, and each covered day should be listed on its own row. The `action` column should include a single word for each row: "mentored" or "covered" or "missed". Include the contract price and `date_end` for mentoring. Do not include price or `date_end` for days covered or missed. The `date` column refers to the **kick-off date** when mentoring *or* to the date missed or covered.

## Adding details

Use `expand_invoices()` to aid with invoicing at the final Friday of each period---either biweekly or monthly. For each contract, the final `invoice_due` value adjusts to accommodate rounding errors with the contract price. It produces a data frame in the following format:

```{r}
#| eval: true
#| message: false
source("invoice_functions.R")
readr::read_csv("my_records.csv") |> 
  expand_invoices(period = "biweekly")
```

A data frame in this format can then be passed along to `set_table()` for formatting with gt. 

## Formatting the table

Use `set_table()` to prepare a formatted table for invoicing a given period of work.

```{r}
#| eval: false
readr::read_csv("my_records.csv") |> 
  expand_invoices(period = "biweekly") |> 
  set_table(invoice_period = "2025-05-02")
```

```{r}
#| eval: true
#| echo: false
readr::read_csv("my_records.csv") |> 
  expand_invoices(period = "biweekly") |> 
  set_table(invoice_period = "2025-05-02") |> 
  as_raw_html()
```

## Rendering Invoices as PDF

Invoices can be created either by modifying the Quarto file directly or by using a dedicated function.

### Render the Quarto file in the IDE

Use [`hybrid_invoice.qmd`](hybrid_invoice.qmd) as a template. After setting the document's `date` in the metadata and `periods`, `period_date`, and `file` parameters in the YAML, use the "Render" button in RStudio or Positron to create [a PDF](hybrid_invoice.pdf).

### Render using `render_invoice()`

`render_invoice()` can be used to set details for an invoice and create a PDF without needing to touch a file.

#### For the most recent period 

By default, an invoice will be prepared for the period ending on or before today, with the date marking the filename.

```{r}
render_invoice("my_records.csv")
```

- [ðŸ“„ invoice_2025-05-06.pdf](invoice_2025-05-06.pdf)

#### Set a file name

Setting the `pdf` argument overrides filename defaults.

```{r}
render_invoice(
  csv = "my_records.csv", 
  pdf = "sherman_invoice2.pdf")
```

- [ðŸ“„ sherman_invoice2.pdf](sherman_invoice2.pdf)

#### Choose an invoice date

The `invoice_date` argument prepares an invoice for some other date.

```{r}
render_invoice(
  csv = "my_records.csv", 
  invoice_date = "2025-06-18")
```

- [ðŸ“„ invoice_2025-06-18.pdf](invoice_2025-06-18.pdf)

#### Choose an invoice period

Manually select an invoice period with `period_date`.

```{r}
render_invoice(
  csv = "my_records.csv", 
  period_date = "2025-04-18", 
  pdf = "sherman_invoice3.pdf")
```

- [ðŸ“„ sherman_invoice3.pdf](sherman_invoice3.pdf)

This method can also be used to set a broader range than might usually be chosen. Two values will construct a range and prepare an invoice for all periods ending within the range; more than two values will match invoice dates on each value. Columns update to reflect the weeks, dates, number of units, and amount due.

```{r}
render_invoice(
  csv = "my_records.csv", 
  period_date = c("2025-03-01", "2025-06-18"), 
  invoice_date = "2025-06-18")
```

- [ðŸ“„ invoice_2025-06-18.pdf](invoice_2025-06-18.pdf)

## Credit

Typst invoice template adapted from Eric Scott's design. Quarto extension adapted from [Jonathan Pedroza's code](https://github.com/jpedroza1228/quarto_extensions/tree/main/invoice).